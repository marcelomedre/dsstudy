plot(nn)
}
limite = 2
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
results = round(predict.nn.values$net.result, digits = 0)
results_agg <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[i] = compute(nn, iristrain[,1:4])
results[i] = round(predict.nn.values$net.result, digits = 0)
results_agg[i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[,i] = compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[i,] = compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[,i] = compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
predict.nn.values = NULL(1,limite)
predict.nn.values = zeros(1,limite)
predict.nn.values(1,limite) <- NULL
predict.nn.values[1,limite] <- NULL
predict.nn.values[,1:limite] <- NULL
limite = 2
predict.nn.values[,1:limite] <- NULL
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[,i] <- compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[,i]] <- compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values$net.result, digits = 0)
results_agg[,i] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results[[i]] = round(predict.nn.values$net.result, digits = 0)
results_agg[[i]] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results[[i,]] = round(predict.nn.values$net.result, digits = 0)
results_agg[[i,]] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results = round(predict.nn.values[[i]]$net.result, digits = 0)
results_agg[[i,]] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results = round(predict.nn.values[[i]]$net.result, digits = 0)
results_agg[[i]] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results = round(predict.nn.values[[i]]$net.result, digits = 0)
results_agg[[,i]] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results = round(predict.nn.values[[i]]$net.result, digits = 0)
results_agg[[i]] <- rowSums(results)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results[i] = round(predict.nn.values[[i]]$net.result, digits = 0)
results_agg[[i]] <- rowSums(results[i])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- compute(nn, iristrain[,1:4])
results[,i] = round(predict.nn.values[[i]]$net.result, digits = 0)
results_agg[[,i]] <- rowSums(results[,i])
}
limite = 2
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i,]] <- compute(nn, iristrain[,1:4])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i,:]] <- compute(nn, iristrain[,1:4])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[,i:limite]] <- compute(nn, iristrain[,1:4])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[,i] <- compute(nn, iristrain[,1:4])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- as.matrix(compute(nn, iristrain[,1:4]))
}
predict.nn.values[[1]]
predict.nn.values[[2]]
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- as.matrix(compute(nn, iristrain[,1:4]))
results[i] = round(predict.nn.values$net.result, digits = 0)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- as.matrix(compute(nn, iristrain[,1:4]))
results[i] = round(predict.nn.values[[i]]$net.result, digits = 0)
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- data.frame(compute(nn, iristrain[,1:4]))
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[,i] <- predict.nn.values$net.result[[i]]
}
predicted.values <- NULL
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[,i] <- predict.nn.values$net.result[[i]]
}
View(predict.nn.values)
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[,i] <- predict.nn.values$net.result
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[[i]] <- predict.nn.values$net.result
}
View(predict.nn.values)
summary(lim.nn)
?glm
lim.nn <- glm(results_agg ~ output_num, data = results_agg)
summary(lim.nn)
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
results = round(predict.nn.values$net.result, digits = 0)
results_agg <- rowSums(results)
plot(1:108, results_agg, pch = 19)
points(output_num, col = "red", pch = 23)
mse(predict.nn.values$net.result, output_num)
install.packages("hydroGOF")
require(hydroGOF)
mse(predict.nn.values$net.result, output_num)
mse(results, output_num)
mse(results_agg, output_num)
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[i] <- predict.nn.values$net.result
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[i] <- predict.nn.values$net.result
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[[i]] <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[i] <- predict.nn.values$net.result[[i]]
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[,i] <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[,i] <- predict.nn.values$net.result[i]
}
for(i in 1:limite){
nn[i] = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values[,i] <- data.frame(compute(nn, iristrain[,1:4]))
predicted.values[,i] <- predict.nn.values$net.result[i]
}
for(i in 1:limite){
nn[i] <- neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values[i] <- data.frame(compute(nn, iristrain[,1:4]))
print <- predict.nn.values$net.result[i]
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values[i] <- data.frame(compute(nn, iristrain[,1:4]))
print <- predict.nn.values$net.result[i]
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
print <- predict.nn.values$net.result[i]
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
print <- predict.nn.values$net.result[i]
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
print (predict.nn.values$net.result[i])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values[[i]] = compute(nn, iristrain[,1:4])
print (predict.nn.values$net.result[[i]])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values[[i]] = compute(nn, iristrain[,1:4])
print (round(predict.nn.values$net.result[[i]]))
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values[[i]] = compute(nn, iristrain[,1:4])
results [i] = round(predict.nn.values$net.result[[i]])
print(results[i])
}
for(i in 1:limite){
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
# plot(nn)
predict.nn.values[[i]] = compute(nn, iristrain[,1:4])
results [i] = as.numeric(round(predict.nn.values$net.result[[i]]))
print(results[i])
}
results [i] = as.numeric(round(predict.nn.values$net.result[[i]], digits = 0))
predict.nn.values[[i]] = compute(nn, iristrain[,1:4])
predict.nn.values_temp = predict.nn.values$net.result[[i]]
results = round(predict.nn.values_temp[i], digits = 0)
predict.nn.values_temp[i] = as.numeric(predict.nn.values$net.result[[i]])
predict.nn.values_temp[i] = as.numeric(unlist(predict.nn.values$net.result[[i]]))
setwd("C:/Users/Marcelo/Desktop/Data/ANN/ANN_Iris")
library(neuralnet)
rm(list = ls())
data <- iris
summary(iris)
str(iris)
library(plyr)
cols <- (c(1,2,3,4))
input <- data.frame(data[,1:4])
output <- data[,5]
maxs <- apply(input, 2, max)
mins <- apply(input, 2, min)
input.scaled <- as.data.frame(scale(input, center = mins, scale = maxs - mins))
data_scaled <- cbind(input.scaled, output)
class(data_scaled)
str(data_scaled)
library(caTools)
set.seed(101)
split = sample.split(data$Sepal.Length, SplitRatio = 0.7)
train <- subset(data_scaled, split == TRUE)
test <- subset(data_scaled, split == FALSE)
iristrain <- cbind(train[,1:4], train$output == 'setosa')
iristrain <- cbind(iristrain, train$output == 'versicolor')
iristrain <- cbind(iristrain, train$output == 'virginica')
names(iristrain)[5:7] <- c('setosa', 'versicolor', 'virginica')
temp_1 <- as.integer(as.logical(iristrain$setosa))
temp_2 <- as.integer(as.logical(iristrain$versicolor))
temp_3 <- as.integer(as.logical(iristrain$virginica))
output_num <- cbind(temp_1,temp_2); output_num <- cbind(output_num,temp_3)
output_num <- rowSums(output_num)
feats <- names(input.scaled)
f <- paste(feats, collapse = " + ")
f <- paste("setosa + versicolor + virginica ~", f)
f <- as.formula(f)
f
nn = neuralnet(f, iristrain, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
results = round(predict.nn.values$net.result, digits = 0)
results_agg <- rowSums(results)
plot(1:108, results_agg, pch = 19)
plot(1:108, results_agg, pch = 19)
points(output_num, col = "red", pch = 23)
require(hydroGOF)
mse(results_agg, output_num)
View(data_scaled)
data_scaled <- cbind(data_scaled[,1:4], train$output == 'setosa')
library(neuralnet)
rm(list = ls())
data <- iris
summary(iris)
str(iris)
library(plyr)
cols <- (c(1,2,3,4))
input <- data.frame(data[,1:4])
output <- data[,5]
maxs <- apply(input, 2, max)
mins <- apply(input, 2, min)
input.scaled <- as.data.frame(scale(input, center = mins, scale = maxs - mins))
data_scaled <- cbind(input.scaled, output)
class(data_scaled)
str(data_scaled)
data_scaled <- cbind(data_scaled[,1:4], train$output == 'setosa')
data_scaled <- cbind(data_scaled[,1:4], data_scaled$output == 'setosa')
data_scaled <- cbind(data_scaled, data_scaled$output == 'versicolor')
View(data_scaled)
rm(list = ls())
data <- iris
summary(iris)
library(neuralnet)
library(plyr)
cols <- (c(1,2,3,4))
input <- data.frame(data[,1:4])
output <- data[,5]
maxs <- apply(input, 2, max)
mins <- apply(input, 2, min)
input.scaled <- as.data.frame(scale(input, center = mins, scale = maxs - mins))
data_scaled <- cbind(input.scaled, output)
class(data_scaled)
str(data_scaled)
data_scaled2 <- cbind(data_scaled[,1:4], data_scaled$output == 'setosa')
data_scaled2 <- cbind(data_scaled2, data_scaled$output == 'versicolor')
data_scaled2 <- cbind(data_scaled2, data_scaled$output == 'virginica')
names(data_scaled2)[5:7] <- c('setosa', 'versicolor', 'virginica')
View(data_scaled2)
temp_1 <- as.integer(as.logical(data_scaled2$setosa))
temp_2 <- as.integer(as.logical(data_scaled2$versicolor))
temp_3 <- as.integer(as.logical(data_scaled2$virginica))
output_num <- cbind(temp_1,temp_2); output_num <- cbind(output_num,temp_3)
output_num <- rowSums(output_num)
library(caTools)
set.seed(101)
split = sample.split(data_scaled2$Sepal.Length, SplitRatio = 0.7)
train <- subset(data_scaled2, split == TRUE)
test <- subset(data_scaled2, split == FALSE)
View(train)
feats <- names(train)
f <- paste(feats, collapse = " + ")
feats <- names(input.scaled)
f <- paste(feats, collapse = " + ")
f <- paste("setosa + versicolor + virginica ~", f)
f <- as.formula(f)
f
nn = neuralnet(f, train, hidden = 2, linear.output = FALSE)
plot(nn)
predict.nn.values = compute(nn, iristrain[,1:4])
predict.nn.values = compute(nn, train[,1:4])
results = round(predict.nn.values$net.result, digits = 0)
results_agg <- rowSums(results)
plot(1:108, results_agg, pch = 19)
points(output_num[nrows(train),], col = "red", pch = 23)
output_train = output_num[nrow(train),]
output_train = output_num[nrow(train)]
output_train <- output_num[nrow(train)]
output_train <- output_num[1:108,]
output_train <- output_num[,1:108]
dim(output_num)
dim(data.frame(output_num))
output_train <- data.frame(output_num[1:108,])
output_train <- data.frame(output_num)[1:108,]
output_test <- data.frame(output_num)[108:150,]
output_test <- data.frame(output_num)[109:150,]
points(output_train,], col = "red", pch = 23)
points(output_train, col = "red", pch = 23)
require(hydroGOF)
mse(results_agg, output_train)
predict.nn.values_te = compute(nn, test[,1:4])
results_te = round(predict.nn.values_te$net.result, digits = 0)
rte <- rowSums(results_te)
plot(1:108, rte, pch = 19)
plot(1:42, rte, pch = 19)
points(output_test, col = "red", pch = 23)
require(hydroGOF)
mse(results_agg, output_train)
mse(rte, output_test)
View(train)
setwd("C:/Users/Marcelo/Desktop/DsStudy/House Prices")
read.table()
?read.table
?read.csv
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
SalePrice <- train$SalePrice
?rm
rm(list = ls())
library(data.table)
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
SalePrice <- train$SalePrice
train$SalePrice <- NULL
full_data <- rbind(train, test)
for(col in colnames(full_data)){
if(typeof(full_data[,col]) == "character"){
new_col = full_data[,col]
new_col[is.na(new_col)] = "missing"
full_data[col] = as.factor(new_col)
}
}
train <- full_data[1:nrow(train),]
train$SalePrice <- SalePrice
test <- full_data[(nrow(train)+1):nrow(full_data),]
summary(train)
train[is.na(train)] = -1
test[is.na(test)] = -1
for (col in colnames(train)){
if(is.numeric(train[,col])){
if( abs(cor(train[,col],train$SalePrice)) > 0.5){
print(col)
print( cor(train[,col],train$SalePrice) )
}
}
}
View(train)
train$tot_sq_footage <- train$GrLivArea + train$TotalBsmtSF
test$tot_sq_footage <- test$GrLivArea + test$TotalBsmtSF
train$total_baths = train$BsmtFullBath + train$FullBath + (0.5 * (train$BsmtHalfBath + train$HalfBath))
test$total_baths = test$BsmtFullBath + test$FullBath + (0.5 * (test$BsmtHalfBath + test$HalfBath))
train$garagevar <- train$GarageCars + train$GarageArea
test$garagevar <- test$GarageCars + test$GarageArea
for (col in colnames(train)){
if(is.numeric(train[,col])){
if( abs(cor(train[,col],train$SalePrice)) > 0.5){
print(col)
print( cor(train[,col],train$SalePrice) )
}
}
}
for (col in colnames(train)){
if(is.numeric(train[,col])){
if( abs(cor(train[,col],train$SalePrice)) > 0.4){
print(col)
print( cor(train[,col],train$SalePrice) )
}
}
}
lm.fit <- glm(SalePrice ~. data = train)
lm.fit <- glm(SalePrice ~., data = train)
summary(lm.fit
summary(lm.fit)
summary(lm.fit)
pr.lm <- predict(lm.fit, test)
pr.lm <- predict(lm.fit, test)
